Overview
This document outlines the design for developing "Memory as a Service" (MaaS) for customer support chatbots, implemented in GoLang and leveraging DynamoDB as the backend. The service will cater to various memory requirements, such as chat message history, conversation summaries, knowledge graphs, token buffers, agent states, and entity memory. A Python client SDK will be provided for easy integration with consumer applications.


DynamoDB Schemas
    Table Structure
        Table Name: <namespace>_sessions
            Partition Key: session_id (string) - Unique identifier for each session.
            Sort Key: item_type#timestamp (string) - Combination of item type and timestamp to distinguish between different types of data.
         
        Attributes:
            session_id (string) - Unique identifier for each session.
            item_type (string) - Type of the item (e.g., user_message, ai_response, summary, knowledge_graph, agent_state, entity).
            timestamp (number) - Timestamp of the item.
            data (string) - JSON string containing the actual data.
            ttl (number) - Time-to-live attribute for automatic expiration.

Examples 
{
  "session_id": "12345",
  "item_type#timestamp": "message#1617171717",
  "data": "{\"user_id\":\"user1\",\"message\":\"Hello, how can I help you?\"}",
  "ttl": 1619773717
}

{
  "session_id": "12345",
  "item_type#timestamp": "agent_state#1617171717",
  "data": "{\"state\":\"active\"}",
  "ttl": 1619773717
}

{
  "session_id": "12345",
  "item_type#timestamp": "entity#1617171717",
  "data": "{\"entity_id\":\"entity1\",\"attributes\":{\"attr1\":\"value1\"}}",
  "ttl": 1619773717
}



API Endpoints
    POST /session/init: Initialize a session.
    PUT /session/update: Update an existing session.
        Request Body:
        {
          "session_id": "12345",
          "item_type": "user_message",
          "timestamp": 1617171717,
          "data": "{\"message\":\"Hello, how can I help you?\"}",
          "ttl": 1619773717
        }
SDK Functions
    def init_session(self, session_id=None):
        ......
    def update_session
    def get_conversation_history(limit=None)
    def get_last_k_user_messages
    def get_last_k_system_responses
    def get_summary
    def get_knowledge_graph
====

[
  {
    "SessionID": "session1",
    "Timestamp": 1622548800,
    "MessageType": "UserQuestion",
    "MessageContent": "What is the weather like today?",
    "UserID": "user1",
    "AIResponseID": "response1"
  },
  {
    "SessionID": "session1",
    "Timestamp": 1622548810,
    "MessageType": "AIResponse",
    "MessageContent": "The weather is sunny with a high of 75 degrees.",
    "UserID": "user1",
    "AIResponseID": "response1"
  },
  {
    "SessionID": "session1",
    "Timestamp": 1622548820,
    "MessageType": "UserQuestion",
    "MessageContent": "Will it rain tomorrow?",
    "UserID": "user1",
    "AIResponseID": "response2"
  },
  {
    "SessionID": "session1",
    "Timestamp": 1622548830,
    "MessageType": "AIResponse",
    "MessageContent": "No, it will not rain tomorrow.",
    "UserID": "user1",
    "AIResponseID": "response2"
  },
  {
    "SessionID": "session2",
    "Timestamp": 1622635200,
    "MessageType": "UserQuestion",
    "MessageContent": "What is the capital of France?",
    "UserID": "user2",
    "AIResponseID": "response3"
  },
  {
    "SessionID": "session2",
    "Timestamp": 1622635210,
    "MessageType": "AIResponse",
    "MessageContent": "The capital of France is Paris.",
    "UserID": "user2",
    "AIResponseID": "response3"
  }
]

SELECT * FROM ChatHistory WHERE SessionID = 'session1'
SELECT * FROM ChatHistory.SessionID-MessageType-Index WHERE SessionID = 'session1' AND MessageType = 'UserQuestion'
SELECT * FROM ChatHistory.UserID-Timestamp-Index WHERE UserID = 'user1' AND Timestamp BETWEEN 1593600000 AND 1625133600

