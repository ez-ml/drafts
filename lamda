import os, json, jwt, time, requests, subprocess
from pathlib import Path

# Load your GitHub App private key (.pem)
GITHUB_APP_ID = os.environ['GITHUB_APP_ID']
GITHUB_INSTALLATION_ID = os.environ['INSTALLATION_ID']
GITHUB_PRIVATE_KEY = os.environ['GITHUB_PRIVATE_KEY']  # PEM string or from Secrets Manager

def generate_jwt(app_id, private_key_pem):
    now = int(time.time())
    payload = {
        "iat": now - 60,
        "exp": now + (10 * 60),
        "iss": app_id
    }
    return jwt.encode(payload, private_key_pem, algorithm="RS256")

def get_installation_token(jwt_token, installation_id):
    headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Accept": "application/vnd.github+json"
    }
    url = f"https://api.github.com/app/installations/{installation_id}/access_tokens"
    response = requests.post(url, headers=headers)
    return response.json()['token']

def lambda_handler(event, context):
    # Generate JWT and Access Token
    jwt_token = generate_jwt(GITHUB_APP_ID, GITHUB_PRIVATE_KEY)
    access_token = get_installation_token(jwt_token, GITHUB_INSTALLATION_ID)

    repo_url = f"https://x-access-token:{access_token}@github.com/<your-org>/<repo-name>.git"
    clone_path = "/tmp/your-repo"

    # Clean previous clone if exists
    if Path(clone_path).exists():
        subprocess.run(["rm", "-rf", clone_path])

    # Clone the repo
    subprocess.run(["git", "clone", repo_url, clone_path], check=True)

    # Make a change to README or similar
    with open(f"{clone_path}/README.md", "a") as f:
        f.write("\nModified by Lambda\n")

    return {
        "statusCode": 200,
        "body": json.dumps("Repo cloned and modified successfully.")
    }








====

import os
import json
import pytest
import handler  # Replace with actual file/module name
from unittest import mock
from unittest.mock import patch

# Sample dummy values
MOCK_JWT = "mocked.jwt.token"
MOCK_ACCESS_TOKEN = "mocked-access-token"
MOCK_INSTALLATION_ID = "12345678"
MOCK_REPO_URL = "https://x-access-token:mocked-access-token@github.com/my-org/my-repo.git"
MOCK_PRIVATE_KEY = """-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAzMockedPrivateKeyExample...
-----END RSA PRIVATE KEY-----"""

@pytest.fixture(autouse=True)
def set_env():
    os.environ["GITHUB_APP_ID"] = "987654"
    os.environ["GITHUB_PRIVATE_KEY"] = MOCK_PRIVATE_KEY
    os.environ["GITHUB_INSTALLATION_ID"] = MOCK_INSTALLATION_ID

@patch("handler.jwt.encode", return_value=MOCK_JWT)
@patch("handler.requests.post")
@patch("handler.subprocess.run")
@patch("builtins.open", new_callable=mock.mock_open)
def test_lambda_handler_success(mock_open, mock_subprocess, mock_post, mock_jwt):
    # Mock GitHub access token response
    mock_post.return_value.json.return_value = {
        "token": MOCK_ACCESS_TOKEN
    }

    mock_subprocess.return_value = mock.Mock(returncode=0)

    result = handler.lambda_handler({}, {})

    assert result["statusCode"] == 200
    assert "Repo cloned and modified successfully" in result["body"]

    # Check subprocess call for git clone
    clone_url = f"https://x-access-token:{MOCK_ACCESS_TOKEN}@github.com/<your-org>/<repo-name>.git"
    mock_subprocess.assert_any_call(["git", "clone", clone_url, "/tmp/your-repo"], check=True)

    # Check that README was modified
    mock_open.assert_called_with("/tmp/your-repo/README.md", "a")


======


# handler.py
import boto3
import json

version = "v2.1"

def lambda_handler(event: dict, context: dict):
    client = boto3.client("secretsmanager")

    get_secret_value_response = client.get_secret_value(
        SecretId="cof/cos/BAGENAWORKFLOWENGINE/third-party-api-tokens-um/6bbda3a8-2fe7-4609-9eaf-98197a93570d/GITHUB_CLIENT_ID"
    )

    # Parse the JSON string from the secret
    secret_dict = json.loads(get_secret_value_response["SecretString"])

    return {
        "ClientID": secret_dict["clientID"],  # assuming "clientID" key is present in secret
        "body": json.dumps({"version": version}),
    }



# test_handler.py
import json
import handler
from unittest.mock import patch

def test_lambda_handler():
    mock_event = {}
    mock_context = {}

    # Mock secret payload as if returned from Secrets Manager
    mock_secret = {
        "clientID": "200"
    }

    with patch("handler.boto3.client") as mock_boto_client:
        mock_sm_client = mock_boto_client.return_value
        mock_sm_client.get_secret_value.return_value = {
            "SecretString": json.dumps(mock_secret)
        }

        result = handler.lambda_handler(mock_event, mock_context)

        assert result == {
            "ClientID": "200",
            "body": json.dumps({"version": "v2.1"})
        }

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
